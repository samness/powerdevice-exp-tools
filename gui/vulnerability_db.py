"""
设备漏洞数据库
版本: v0.1.3
"""

import hashlib
import time
import base64
from datetime import datetime
import logging
from dataclasses import dataclass
from typing import Dict, List, Optional

# 个人密语
MOTTO = "君子论迹不论心"
MOTTO_HASH = hashlib.sha256(MOTTO.encode()).hexdigest()[:16]

@dataclass
class VulnerabilityInfo:
    """漏洞信息类"""
    id: str
    name: str
    description: str
    params: Dict[str, str]
    impact_level: str
    cvss_score: float
    conditions: Optional[str] = None
    affected_versions: Optional[str] = None
    affected_components: Optional[str] = None
    fix_suggestions: Optional[str] = None

def _verify_db_integrity():
    """验证数据库完整性"""
    try:
        # 获取当前日期的时间戳（以天为单位）
        current_date = datetime.now().date()
        timestamp = int(current_date.strftime("%Y%m%d"))
        
        # 生成数据库签名
        db_sign = hashlib.sha256(f"{MOTTO}_vuln_db_{timestamp}".encode()).hexdigest()
        motto_verify = hashlib.sha256(MOTTO.encode()).hexdigest()
        
        # 验证签名
        is_valid = (db_sign.startswith(motto_verify[:4]) and 
                   MOTTO_HASH.endswith(db_sign[-4:]))
        
        if not is_valid:
            logging.warning("Database integrity check failed")
            logging.debug(f"DB Sign: {db_sign}")
            logging.debug(f"Motto Verify: {motto_verify}")
            logging.debug(f"Motto Hash: {MOTTO_HASH}")
            logging.debug(f"Timestamp: {timestamp}")
            
        return is_valid
    except Exception as e:
        logging.error(f"Error verifying database integrity: {str(e)}")
        import traceback
        logging.error(traceback.format_exc())
        return False

# 火力发电设备漏洞库
THERMAL_POWER_VULNS = {
    "西门子 SGT-800": {
        "SGT800-V001": VulnerabilityInfo(
            id="SGT800-V001",
            name="PLC认证绕过漏洞",
            description="西门子SGT-800燃气轮机控制系统中的PLC存在认证绕过漏洞，攻击者可以通过构造特殊的Modbus数据包绕过认证机制，直接访问控制系统。",
            params={
                "target_ip": "目标设备IP地址",
                "target_port": "Modbus端口号(默认502)",
                "plc_address": "PLC地址",
                "command_type": "命令类型(读/写)"
            },
            impact_level="高危",
            cvss_score=9.8,
            conditions="需要网络可达目标设备，且设备开启Modbus服务",
            affected_versions="SGT-800 v1.0 - v2.5",
            affected_components="控制系统PLC模块",
            fix_suggestions="1. 升级到SGT-800 v2.6或更高版本\n2. 配置访问控制列表(ACL)\n3. 启用Modbus加密通信\n4. 定期更换认证密钥"
        ),
        "SGT800-V002": VulnerabilityInfo(
            id="SGT800-V002",
            name="温度控制器缓冲区溢出",
            description="SGT-800温度控制模块存在缓冲区溢出漏洞，攻击者可以通过发送超长的温度数据包导致控制器崩溃或执行任意代码。",
            params={
                "target_ip": "目标设备IP地址",
                "target_port": "温度控制端口(默认2000)",
                "payload": "溢出载荷",
                "shellcode": "要执行的代码"
            },
            impact_level="严重",
            cvss_score=10.0,
            conditions="需要网络可达目标设备，且温度控制服务正在运行",
            affected_versions="SGT-800 v1.0 - v2.3",
            affected_components="温度控制模块",
            fix_suggestions="1. 升级到SGT-800 v2.4或更高版本\n2. 启用数据包长度检查\n3. 配置防火墙规则限制访问\n4. 部署入侵检测系统"
        )
    },
    "GE LM6000": {
        "LM6000-V001": VulnerabilityInfo(
            id="LM6000-V001",
            name="硬编码后门账户",
            description="GE LM6000燃气轮机控制系统存在硬编码的管理员账户，攻击者可以使用该账户直接登录系统并获取完全控制权限。",
            params={
                "target_ip": "目标设备IP地址",
                "username": "后门账户名",
                "password": "后门密码"
            },
            impact_level="严重",
            cvss_score=9.9,
            conditions="需要网络可达目标设备，且Web管理界面开启",
            affected_versions="LM6000 v3.0 - v4.2",
            affected_components="Web管理界面",
            fix_suggestions="1. 升级到LM6000 v4.3或更高版本\n2. 修改所有默认密码\n3. 禁用未使用的管理账户\n4. 启用双因素认证"
        )
    },
    "三菱 M701F": {
        "M701F-V001": VulnerabilityInfo(
            id="M701F-V001",
            name="命令注入漏洞",
            description="三菱M701F燃气轮机控制系统的命令处理模块存在注入漏洞，攻击者可以通过构造特殊的命令字符串执行任意系统命令。",
            params={
                "target_ip": "目标设备IP地址",
                "command_port": "命令端口(默认4000)",
                "injection_string": "注入的命令"
            },
            impact_level="高危",
            cvss_score=9.5,
            conditions="需要网络可达目标设备，且命令处理服务正在运行",
            affected_versions="M701F v2.0 - v3.1",
            affected_components="命令处理模块",
            fix_suggestions="1. 升级到M701F v3.2或更高版本\n2. 实现命令白名单机制\n3. 对输入命令进行严格验证\n4. 限制命令执行权限"
        )
    }
}

# 水利发电设备漏洞库
HYDRO_POWER_VULNS = {
    "VH喷嘴冲击式机组": {
        "VH-V001": VulnerabilityInfo(
            id="VH-V001",
            name="压力控制参数篡改",
            description="VH喷嘴冲击式机组压力控制系统存在参数篡改漏洞，攻击者可以修改关键压力参数导致设备损坏。",
            params={
                "target_ip": "目标设备IP地址",
                "control_port": "控制端口(默认3000)",
                "parameter_id": "要修改的参数ID",
                "new_value": "新的参数值"
            },
            impact_level="严重",
            cvss_score=9.7,
            conditions="需要网络可达目标设备，且压力控制服务开启",
            affected_versions="VH系列 v1.5 - v2.8",
            affected_components="压力控制系统",
            fix_suggestions="1. 升级到VH系列 v2.9或更高版本\n2. 实现参数修改审计日志\n3. 配置参数修改权限控制\n4. 部署实时监控系统"
        )
    },
    "AHM调速系统": {
        "AHM-V001": VulnerabilityInfo(
            id="AHM-V001",
            name="未授权访问漏洞",
            description="AHM调速系统Web界面存在未授权访问漏洞，攻击者可以绕过认证直接访问控制系统。",
            params={
                "target_ip": "目标设备IP地址",
                "web_port": "Web端口(默认80)",
                "bypass_url": "绕过认证的URL"
            },
            impact_level="高危",
            cvss_score=8.8,
            conditions="需要网络可达目标设备，且Web服务开启",
            affected_versions="AHM v3.0 - v4.1",
            affected_components="Web管理界面",
            fix_suggestions="1. 升级到AHM v4.2或更高版本\n2. 配置严格的访问控制\n3. 启用HTTPS加密\n4. 部署Web应用防火墙"
        )
    }
}

# 光伏发电设备漏洞库
SOLAR_POWER_VULNS = {
    "FSS7薄膜组件": {
        "FSS7-V001": VulnerabilityInfo(
            id="FSS7-V001",
            name="固件验证绕过",
            description="FSS7薄膜组件控制系统存在固件验证绕过漏洞，攻击者可以上传恶意固件控制设备。",
            params={
                "target_ip": "目标设备IP地址",
                "firmware_port": "固件更新端口(默认5000)",
                "malicious_firmware": "恶意固件文件路径"
            },
            impact_level="严重",
            cvss_score=9.6,
            conditions="需要网络可达目标设备，且固件更新服务开启",
            affected_versions="FSS7 v1.0 - v2.2",
            affected_components="固件更新模块",
            fix_suggestions="1. 升级到FSS7 v2.3或更高版本\n2. 实现固件签名验证\n3. 禁用远程固件更新\n4. 定期检查固件完整性"
        )
    },
    "SPMa6": {
        "SPMa6-V001": VulnerabilityInfo(
            id="SPMa6-V001",
            name="参数注入漏洞",
            description="SPMa6逆变器控制系统存在参数注入漏洞，攻击者可以通过修改运行参数导致设备异常。",
            params={
                "target_ip": "目标设备IP地址",
                "inverter_port": "逆变器控制端口(默认6000)",
                "parameter_name": "要注入的参数名",
                "injection_value": "注入的参数值"
            },
            impact_level="高危",
            cvss_score=8.9,
            conditions="需要网络可达目标设备，且逆变器控制服务开启",
            affected_versions="SPMa6 v2.0 - v3.5",
            affected_components="逆变器控制模块",
            fix_suggestions="1. 升级到SPMa6 v3.6或更高版本\n2. 实现参数范围检查\n3. 配置参数修改审计\n4. 部署异常检测系统"
        )
    }
}

# 风力发电设备漏洞库
WIND_POWER_VULNS = {
    "VV236": {
        "VV236-V001": VulnerabilityInfo(
            id="VV236-V001",
            name="远程代码执行",
            description="VV236风力发电机组控制系统存在远程代码执行漏洞，攻击者可以通过构造特殊的控制命令在设备上执行任意代码。",
            params={
                "target_ip": "目标设备IP地址",
                "control_port": "控制端口(默认7000)",
                "command": "要执行的命令",
                "execution_mode": "执行模式(同步/异步)"
            },
            impact_level="严重",
            cvss_score=10.0,
            conditions="需要网络可达目标设备，且控制服务开启",
            affected_versions="VV236 v1.0 - v2.7",
            affected_components="控制系统",
            fix_suggestions="1. 升级到VV236 v2.8或更高版本\n2. 实现命令白名单机制\n3. 配置严格的访问控制\n4. 部署入侵检测系统"
        )
    },
    "SGSG14-222": {
        "SGSG14-V001": VulnerabilityInfo(
            id="SGSG14-V001",
            name="密钥泄露漏洞",
            description="SGSG14-222风力发电机组通信模块存在密钥泄露漏洞，攻击者可以获取通信密钥并解密敏感数据。",
            params={
                "target_ip": "目标设备IP地址",
                "comm_port": "通信端口(默认8000)",
                "key_type": "要获取的密钥类型"
            },
            impact_level="高危",
            cvss_score=8.5,
            conditions="需要网络可达目标设备，且通信服务开启",
            affected_versions="SGSG14-222 v3.0 - v4.1",
            affected_components="通信模块",
            fix_suggestions="1. 升级到SGSG14-222 v4.2或更高版本\n2. 定期更换通信密钥\n3. 启用强加密算法\n4. 实现密钥管理系统"
        )
    }
}

# 设备类型到漏洞库的映射
DEVICE_VULN_MAPPING = {
    "火力发电": THERMAL_POWER_VULNS,
    "水利发电": HYDRO_POWER_VULNS,
    "光伏发电": SOLAR_POWER_VULNS,
    "风力发电": WIND_POWER_VULNS
}

def get_device_vulnerabilities(power_type: str, device_model: str) -> Dict[str, VulnerabilityInfo]:
    """获取指定设备的漏洞列表"""
    try:
        logging.info("Getting vulnerabilities for %s - %s", power_type, device_model)
        if power_type not in DEVICE_VULN_MAPPING:
            logging.warning("Invalid power type: %s", power_type)
            return {}
            
        device_vulns = DEVICE_VULN_MAPPING[power_type].get(device_model, {})
        logging.info("Found %d vulnerabilities", len(device_vulns))
        return device_vulns
    except Exception as e:
        logging.error("Error getting device vulnerabilities: %s", str(e))
        import traceback
        logging.error(traceback.format_exc())
        return {}

def get_vulnerability_info(power_type: str, device_model: str, vuln_id: str) -> Optional[VulnerabilityInfo]:
    """获取指定漏洞的详细信息"""
    try:
        logging.debug(f"Getting vulnerability info - Type: {power_type}, Model: {device_model}, ID: {vuln_id}")
        
        # 记录输入参数
        logging.debug(f"Input parameters:")
        logging.debug(f"  Power type: {power_type}")
        logging.debug(f"  Device model: {device_model}")
        logging.debug(f"  Vulnerability ID: {vuln_id}")
        
        # 获取漏洞库
        vuln_db = DEVICE_VULN_MAPPING.get(power_type)
        if vuln_db is None:
            logging.error(f"Unknown power type: {power_type}")
            logging.debug(f"Available power types: {list(DEVICE_VULN_MAPPING.keys())}")
            return None
            
        # 获取设备漏洞信息
        device_vulns = vuln_db.get(device_model)
        if device_vulns is None:
            logging.error(f"Device model {device_model} not found in {power_type} database")
            logging.debug(f"Available devices: {list(vuln_db.keys())}")
            return None
            
        # 获取具体漏洞信息
        vuln_info = device_vulns.get(vuln_id)
        if vuln_info is None:
            logging.error(f"Vulnerability ID {vuln_id} not found for device {device_model}")
            logging.debug(f"Available vulnerabilities: {list(device_vulns.keys())}")
            return None
            
        logging.info(f"Successfully retrieved vulnerability info for {vuln_id}")
        logging.debug(f"Vulnerability details: {vuln_info}")
        return vuln_info
        
    except Exception as e:
        logging.error(f"Error getting vulnerability info: {str(e)}")
        import traceback
        logging.error(traceback.format_exc())
        return None

def get_all_vulnerability_ids() -> List[str]:
    """获取所有漏洞ID列表"""
    try:
        logging.info("Getting all vulnerability IDs")
        vuln_ids = []
        for power_type in DEVICE_VULN_MAPPING.values():
            for device_vulns in power_type.values():
                vuln_ids.extend(device_vulns.keys())
        logging.info("Found %d total vulnerabilities", len(vuln_ids))
        return vuln_ids
    except Exception as e:
        logging.error("Error getting all vulnerability IDs: %s", str(e))
        import traceback
        logging.error(traceback.format_exc())
        return [] 